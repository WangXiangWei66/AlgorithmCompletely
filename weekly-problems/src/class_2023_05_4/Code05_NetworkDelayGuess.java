package class_2023_05_4;
//来自招商银行
//这个题是个破题，但这可能是经常遇到的一种题，
//讲一下思路即可，没有必要投入大多时间给这种题目
//一共有三个服务A、B、C，网络延时分别为a、b、c
//并且一定有：1 <= a <= b <= c <= 10^9
//但是具体的延时数字丢失了，只有单次调用的时间
//一次调用不可能重复使用相同的服务，
//一次调用可能使用了三个服务中的某1个、某2个或者全部3个服务
//比如一个调用的时间，T = 100
//100的延时可能来自以下7种情况：
//a = 100，这次调用可能单独使用了A
//b = 100，这次调用可能单独使用了B
//c = 100，这次调用可能单独使用了C
//a + b = 100，这次调用可能组合使用了A、B
//a + c = 100，这次调用可能组合使用了A、C
//b + c = 100，这次调用可能组合使用了B、C
//a + b + c = 100，这次调用可能组合使用了A、B、C全部服务
//那么可想而知，如果给的调用时间足够多，是可以猜测出a、b、c的
//给定一个数组times，长度为n，并且一定有4 <= n <= 7
//times[i] = s，表示i号调用用时s，而且times中一定都是正数且没有重复值
//请根据n次调用，猜测出a、b、c三元组可能的情况数
//如果任何a、b、c都无法匹配上给定的调用耗时，返回0
//测试的次数T <= 100
//也就是说，一共最多给定100个数组，每一次让你返回a、b、c三元组可能的情况数
public class Code05_NetworkDelayGuess {
}
